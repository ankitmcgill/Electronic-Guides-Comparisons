*************************************************************************************
** C CODING CONVENTIONS *************************************************************
*************************************************************************************
** DECEMBER 20 2016
**
** ANKIT BHATNAGAR
** ANKIT.BHATNAGARINDIA@GMAIL.COM
**
** COMMON C CODING CONVENTIONS THAT I NEED TO FOLLOW
** ACROSS MY C CODE ACCROSS ALL PLATFORMS (AVR, ARM ETC.)
**
** Reference
**		1. https://www.kernel.org/doc/Documentation/CodingStyle
**		2. https://www.gnu.org/prep/standards/standards.html
*************************************************************************************

1. Indentation
================
	Indentation is 8 characters. Some people use 4 or even 2 as 8 makes
	the text go too much to the right of the screen but thats wrong.
	8 makes it completely unambigously clear of the level blocks and
	thus makes reading code easier.
	
	If you are indenting code so much that it's going off a 80 terminal
	screen, thenm the issue is with the code as you should not be 
	using somany levels of indenting in your code in the first place.
	fix the code logic
	
	Always, always stick with indentation = 8 !
	
2. Common Data Types
=======================
	Always used sized interger data types defined in "stdint.h"
	wherever possible. they are cross platform compatible and easier
	to read
	
	uint8_t		---	unsigned char
	int8_t		---	char
	uint16_t	---	unsigned short
	int16_t		---	short
	uint32_t	---	unsigned int / long
	int32_t		---	int / long
	uint64_t	---	unsigned long long
	int64_t		---	long long
	
3. External Libraries
=======================
	* Any element of the external library (function/ variable / define) should 
	start with library name in all capitals
	
	eg: uint8_t AVR_GPIO_Mcu_Type;
		void AVR_GPIO_Get_Status(void);
	
	* The remaining part of the variable name / function name should be seperated
	by underscores(_) and each part starting with upper case (snake case)
	
	eg: AVR_GPIO_Get_Status(void);
	
	* Any defines within the library or in your code should be in ALL CAPITALS
	
	eg: #define AVR_GPIO_MCU_TYPE 10
	
	* Every library header and source file should have a library header listing
	the name of library, author name & contact details, date of creation and
	purpose
	
	eg:
		////////////////////////////////////////////////////////////////
		// AVR GPIO LIBRARY
		//
		// NOVEMBER 30, 2016
		//
		// ANKIT BHATNAGAR
		// ANKIT.BHATNAGARINDIA@GMAIL.COM
		//
		// REFERENCE:
		// http://www.avrfreaks.net/forum/macros-ddr-and-port-pin-name
		////////////////////////////////////////////////////////////////
	
4. Datatypes & Variables
==========================
	Variable names should visibly represent their scope. Weather they are
	GLOBAL, AUTO / LOCAL or STATIC
	
	GLOBAL			---	<vatiable_name>_g
	STATIC			---	<variable_name>_s
	LOCAL/AUTO		--- <variable_name>
	GLOBAL STATIC	---	<variable_name>_gs

5. ENUMERATIONS
================
	Enumeration name should visibly specify weather it's a normal enum name
	or it has be typedef'ed
	
	normal
	-------
	enum
	{
		....
	} example_enum;
	
	typedef'ed
	-----------
	typedef enum example_enum_t
	{
		...
	} example_enum_t;
	
	Enumeration ELEMENTS SHOULD BE WRITTEN IN ALL CAPITAL LETTERS AND SHOULD
	HAVE A VALUE ASSIGNED TO THEM. Do not leave the values to be assigned by
	the compiler as that can lead to confusion.