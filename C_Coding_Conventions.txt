*************************************************************************************
** C CODING CONVENTIONS *************************************************************
*************************************************************************************
** DECEMBER 20 2016
**
** ANKIT BHATNAGAR
** ANKIT.BHATNAGARINDIA@GMAIL.COM
**
** COMMON C CODING CONVENTIONS THAT I NEED TO FOLLOW
** ACROSS MY C CODE ACCROSS ALL PLATFORMS (AVR, ARM ETC.)
**
** Reference
**		1. https://www.kernel.org/doc/Documentation/CodingStyle
**		2. https://www.gnu.org/prep/standards/standards.html
*************************************************************************************

1. Indentation
================
	Indentation is 8 characters. Some people use 4 or even 2 as 8 makes
	the text go too much to the right of the screen but thats wrong.
	8 makes it completely unambigously clear of the level blocks and
	thus makes reading code easier.
	
	If you are indenting code so much that it's going off a 80 terminal
	screen, thenm the issue is with the code as you should not be 
	using somany levels of indenting in your code in the first place.
	fix the code logic
	
	Always, always stick with indentation = 8 !
	
2. COMMENTS
============
	* Comments should always be in ALL CAPITALS
	
	* NEVER write the comment on the same line as a code segment. Always
	write the comment, on the line preceeding the code line.
	eg:
		int height = 10; //SET INITIAL HEIGHT (WRONG)
		
		//SET INITIAL HEIGHT (CORRECT)
		int height = 10;
	
	*Dont use the /* & */ pair for multi line comments. Use // on each line
	as using /* prevents block commenting out of code during testing / debugging

3. DEFINES
============
	* Define name should be in ALL CAPITAL
	
	* Defines belonging to the a library / module should have the name
	of the module prepended to the define
	eg:
		#define AVR_GPIO_HIGH (1)
	
	* Always take care and use paranthesis to protect the order of operation
	in macros
	eg:
		#define AVR_OPERARTION(a,b)	((a)+(b)+1)

4. Common Data Types
=======================
	Always used sized interger data types defined in "stdint.h"
	wherever possible. they are cross platform compatible and easier
	to read
	
	uint8_t		---	unsigned char
	int8_t		---	char
	uint16_t	---	unsigned short
	int16_t		---	short
	uint32_t	---	unsigned int / long
	int32_t		---	int / long
	uint64_t	---	unsigned long long
	int64_t		---	long long
	
5. External Libraries
=======================
	* Any element of the external library (function/ variable / define) should 
	start with library name in all capitals
	
	eg: uint8_t AVR_GPIO_Mcu_Type;
		void AVR_GPIO_Get_Status(void);
	
	* The remaining part of the variable name / function name should be seperated
	by underscores(_) and each part starting with upper case (snake case)
	
	eg: AVR_GPIO_Get_Status(void);
	
	* Any defines within the library or in your code should be in ALL CAPITALS
	
	eg: #define AVR_GPIO_MCU_TYPE 10
	
	* Every library header and source file should have a library header listing
	the name of library, author name & contact details, date of creation and
	purpose
	
	eg:
		////////////////////////////////////////////////////////////////
		// AVR GPIO LIBRARY
		//
		// NOVEMBER 30, 2016
		//
		// ANKIT BHATNAGAR
		// ANKIT.BHATNAGARINDIA@GMAIL.COM
		//
		// REFERENCE:
		// http://www.avrfreaks.net/forum/macros-ddr-and-port-pin-name
		////////////////////////////////////////////////////////////////
	
	* always used INCLUDE GUARDS when writing any external library. This prevents
	circular include issues and errors
	
	eg:
		#ifndef _AVR_GPIO_H_
		#define _AVR_GPIO_H_
		.....
		#endif
		
6. Datatypes & Variables
==========================
	Variable names should visibly represent their scope. Weather they are
	GLOBAL, AUTO / LOCAL or STATIC
	
	GLOBAL			---	<vatiable_name>_g
	STATIC			---	<variable_name>_s
	LOCAL/AUTO		--- <variable_name>
	GLOBAL STATIC	---	<variable_name>_gs

7. ENUMERATIONS / STRUCTS / UNIONS
====================================
	Enumeration name should visibly specify weather it's a normal enum name
	or it has be typedef'ed
	
	Name of the enumeration should be in all small letters. Use all capitals
	only for defines !
	
	normal
	-------
	enum
	{
		....
	} example_enum;
	
	typedef'ed
	-----------
	typedef enum example_enum_t
	{
		...
	} example_enum_t;
	
	Enumeration ELEMENTS SHOULD BE WRITTEN IN ALL CAPITAL LETTERS AND SHOULD
	HAVE A VALUE ASSIGNED TO THEM. Do not leave the values to be assigned by
	the compiler as that can lead to confusion.
	
8. FUNCTIONS
==============
	* Function name should be in snake case letters with each part separated with
	an underscore(_)
	
	eg: Set_Pins(void);
	
	* If the function takes no arguments, make that explicit by using 'void'
	
	* Always at the start of fucntion, write 2-3 line summary of what the function
	does. Then leave an empty line and then start the function code.
	eg:
		void AVR_GPIO_Init(void)
		{
			//INITIALIZES AVR GPIO PINS
			
			... actual code ...
		}
	
	* All the functions belonging to the same module / library should have their
	name prefixed with the module name in all capitals
	
	eg: AVR_GUART_Init(void);